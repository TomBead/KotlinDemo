plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
}

android {
    namespace 'com.tt.ktdemo'
    compileSdk 33

    defaultConfig {
        applicationId "com.tt.ktdemo"
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        ndk {
            //设置支持的SO库架构（开发者可以根据需要，选择一个或多个平台的so）
            abiFilters  "armeabi-v7a", "arm64-v8a"
        }

        // 构建配置字段
        buildConfigField('String', 'UM_KEY', "\"123456\"")
        buildConfigField('String', 'QQ_ID', "\"123456\"")
        buildConfigField('String', 'QQ_SECRET', "\"123456\"")
        buildConfigField('String', 'WX_ID', "\"123456\"")
        buildConfigField('String', 'WX_SECRET', "\"123456\"")
        //
        manifestPlaceholders = [QQ_ID: "100424468"]

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
        // Move the tests to tests/java, tests/res, etc...
//        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    // Apk 签名的那些事：https://www.jianshu.com/p/a1f8e5896aa2
    signingConfigs {
        config {
            storeFile file(StoreFile)
            storePassword StorePassword
            keyAlias KeyAlias
            keyPassword KeyPassword
        }
    }


    // 构建配置：https://developer.android.google.cn/studio/build/build-variants
    buildTypes {

        debug {
            // 给包名添加后缀
//            applicationIdSuffix '.debug'
            // 调试模式开关
            debuggable true
            jniDebuggable true
            // 压缩对齐开关
            zipAlignEnabled false
            // 移除无用的资源
            shrinkResources false
            // 代码混淆开关
            minifyEnabled false
            // 签名信息配置
            signingConfig signingConfigs.config
            // 添加清单占位符
            addManifestPlaceholders([
                    'app_name': '安卓技术中台 Debug 版'
            ])
            // 调试模式下只保留一种架构的 so 库，提升打包速度
            ndk {
                abiFilters 'armeabi-v7a'
            }

            // 日志打印开关
            buildConfigField('boolean', 'LOG_ENABLE', "false")
            // 测试包下的 BuglyId
            buildConfigField('String', 'BUGLY_ID', "\"123456\"")
            // 测试服务器的主机地址
            buildConfigField('String', 'HOST_URL', "\"123456\"")
        }

        release {
            // 调试模式开关
            debuggable false
            jniDebuggable false
            // 压缩对齐开关
            zipAlignEnabled true
            // 移除无用的资源
            shrinkResources true
            // 代码混淆开关
            minifyEnabled true
            // 签名信息配置
            signingConfig signingConfigs.config
            // 添加清单占位符
            addManifestPlaceholders([
                    'app_name': '@string/app_name'
            ])
            // 仅保留两种架构的 so 库，根据 Bugly 统计得出
            ndk {
                // armeabi：万金油架构平台（占用率：0%）
                // armeabi-v7a：曾经主流的架构平台（占用率：10%）
                // arm64-v8a：目前主流架构平台（占用率：95%）
                abiFilters 'armeabi-v7a', 'arm64-v8a'
            }

            // 日志打印开关
            buildConfigField('boolean', 'LOG_ENABLE', "false")
            // 测试包下的 BuglyId
            buildConfigField('String', 'BUGLY_ID', "\"123456\"")
            // 测试服务器的主机地址
            buildConfigField('String', 'HOST_URL', "\"123456\"")
        }
    }

//    packagingOptions {
//        // 剔除这个包下的所有文件（不会移除签名信息）
//        exclude 'META-INF/*******'
//    }


    applicationVariants.all { variant ->
        // apk 输出文件名配置
        variant.outputs.all { output ->
            outputFileName = rootProject.getName() + '_v' + variant.versionName + '_' + variant.buildType.name
            if (variant.buildType.name == buildTypes.release.getName()) {
                outputFileName += '_' + new Date().format('MMdd')
            }
            outputFileName += '.apk'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.6.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
//    implementation 'com.google.android.gms:play-services-basement:18.0.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'


    def lifecycle_version = "2.4.1"// ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version"// LiveData
    implementation "androidx.lifecycle:lifecycle-livedata:$lifecycle_version"// Lifecycle
    implementation "androidx.lifecycle:lifecycle-runtime:$lifecycle_version"
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.1'
    //存储
    //room数据库
    //room数据库
    api "androidx.room:room-runtime:2.4.2"
    kapt "androidx.room:room-compiler:2.4.2" // Kotlin 使用 kapt
    api "androidx.room:room-ktx:2.4.2"//Coroutines support for Room 协程操作库


    // 权限请求框架：https://github.com/getActivity/XXPermissions
    implementation 'com.github.getActivity:XXPermissions:12.3'

    // 标题栏框架：https://github.com/getActivity/TitleBar
    implementation 'com.github.getActivity:TitleBar:9.2'

    // 吐司框架：https://github.com/getActivity/ToastUtils
    implementation 'com.github.getActivity:ToastUtils:9.5'

    // 网络请求框架：https://github.com/getActivity/EasyHttp
    implementation 'com.github.getActivity:EasyHttp:10.2'
    // OkHttp 框架：https://github.com/square/okhttp
    // noinspection GradleDependency
    implementation 'com.squareup.okhttp3:okhttp:3.12.13'

    // Json 解析框架：https://github.com/google/gson
    implementation 'com.google.code.gson:gson:2.8.8'
    // Gson 解析容错：https://github.com/getActivity/GsonFactory
    implementation 'com.github.getActivity:GsonFactory:5.2'


    //沉浸式状态栏
    //https://github.com/gyf-dev/ImmersionBar
// 基础依赖包，必须要依赖
    implementation 'com.geyifeng.immersionbar:immersionbar:3.2.2'
// kotlin扩展（可选）
    implementation 'com.geyifeng.immersionbar:immersionbar-ktx:3.2.2'

    //下拉刷新
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.0.0'
    //适配器
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:3.0.4'

    // 图片加载框架：https://github.com/bumptech/glide
    // 官方使用文档：https://github.com/Muyangmin/glide-docs-cn
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    kapt 'com.github.bumptech.glide:compiler:4.12.0'

    // Kotlin 协程：https://github.com/Kotlin/kotlinx.coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.0'

    //retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    // 日志打印框架：https://github.com/JakeWharton/timber
    implementation 'com.jakewharton.timber:timber:4.7.1'

    //日记
    implementation 'com.orhanobut:logger:2.2.0'

    // 腾讯 MMKV：https://github.com/Tencent/MMKV
    implementation 'com.tencent:mmkv-static:1.2.10'

    // 内存泄漏监测框架：https://github.com/square/leakcanary
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.8'
//    previewImplementation 'com.squareup.leakcanary:leakcanary-android:2.8'


    // Bugly 异常捕捉：https://bugly.qq.com/docs/user-guide/instruction-manual-android/?v=20190418140644
    implementation 'com.tencent.bugly:crashreport:3.4.4'
    implementation 'com.tencent.bugly:nativecrashreport:3.9.2'

    // 权限请求框架：https://github.com/getActivity/XXPermissions
    implementation 'com.github.getActivity:XXPermissions:12.3'


    // 友盟公共库
    api 'com.umeng.umsdk:common:9.4.0'
    api 'com.umeng.umsdk:asms:1.2.3'
    // 友盟分享库
    api 'com.umeng.umsdk:share-core:7.1.5'
    // 友盟微信分享
    api 'com.umeng.umsdk:share-wx:7.1.5'
    // 友盟 QQ 分享
    api 'com.umeng.umsdk:share-qq:7.1.5'

    // QQ 组件：https://wiki.open.qq.com/wiki/QQ%E7%94%A8%E6%88%B7%E8%83%BD%E5%8A%9B
    api 'com.tencent.tauth:qqopensdk:3.53.0'
    // 微信组件：https://developers.weixin.qq.com/doc/oplatform/Mobile_App/Access_Guide/Android.html
    api 'com.tencent.mm.opensdk:wechat-sdk-android-without-mta:6.7.9'

}